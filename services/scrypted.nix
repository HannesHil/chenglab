# Auto-generated using compose2nix v0.1.9.
{
  config,
  pkgs,
  lib,
  ...
}: {
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Containers
  virtualisation.oci-containers = {
    backend = "podman";
    containers = {
      "scrypted" = {
        image = "ghcr.io/koush/scrypted";
        environment = {
          SCRYPTED_WEBHOOK_UPDATE = "http://localhost:10444/v1/update";
          SCRYPTED_WEBHOOK_UPDATE_AUTHORIZATION = "Bearer 40dfdcaa593149f2a1e735675800d6e39ad4f8feac1d03eba1156037f3c32325";
          SCRYPTED_DOCKER_AVAHI = "true";
        };
        volumes = [
          "/var/lib/scrypted:/server/volume:rw"
        ];
        labels = {
          "com.centurylinklabs.watchtower.scope" = "scrypted";
        };
        log-driver = "journald";
        extraOptions = [
          "--log-opt=max-file=10"
          "--log-opt=max-size=10m"
          "--network=host"
          "--security-opt=apparmor:unconfined"
        ];
      };

      "scrypted-watchtower" = {
        image = "containrrr/watchtower";
        environment = {
          WATCHTOWER_HTTP_API_PERIODIC_POLLS = "true";
          WATCHTOWER_HTTP_API_TOKEN = "40dfdcaa593149f2a1e735675800d6e39ad4f8feac1d03eba1156037f3c32325";
          WATCHTOWER_HTTP_API_UPDATE = "true";
          WATCHTOWER_SCOPE = "scrypted";
        };
        volumes = [
          "/var/run/docker.sock:/var/run/docker.sock:rw"
        ];
        ports = [
          "10444:8080/tcp"
        ];
        cmd = ["--interval" "3600" "--cleanup" "--scope" "scrypted"];
        labels = {
          "com.centurylinklabs.watchtower.scope" = "scrypted";
        };
        log-driver = "journald";
        extraOptions = [
          "--network-alias=watchtower"
          "--network=scrypted_default"
        ];
      };
    };
  };

  services.nginx = {
    virtualHosts = {
      "scrypted.chengeric.com" = {
        forceSSL = true;
        useACMEHost = "chengeric.com";
        locations."/" = {
          proxyPass = "https://127.0.0.1:10443";
        };
      };
    };
  };

  systemd = {
    tmpfiles.rules = ["d /var/lib/scrypted 0755 root root"];

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    targets = {
      "podman-compose-scrypted-root" = {
        unitConfig = {
          Description = "Root target generated by compose2nix.";
        };
        wantedBy = ["multi-user.target"];
      };
    };

    services = {
      "podman-scrypted-watchtower" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-scrypted_default.service"
        ];
        requires = [
          "podman-network-scrypted_default.service"
        ];
        partOf = [
          "podman-compose-scrypted-root.target"
        ];
        wantedBy = [
          "podman-compose-scrypted-root.target"
        ];
      };

      "podman-scrypted" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        partOf = [
          "podman-compose-scrypted-root.target"
        ];
        wantedBy = [
          "podman-compose-scrypted-root.target"
        ];
      };

      "podman-network-scrypted_default" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "${pkgs.podman}/bin/podman network rm -f scrypted_default";
        };
        script = ''
          podman network inspect scrypted_default || podman network create scrypted_default
        '';
        partOf = ["podman-compose-scrypted-root.target"];
        wantedBy = ["podman-compose-scrypted-root.target"];
      };

      "backup-scrypted" = {
        description = "Backup Scrypted installation with Kopia";
        wantedBy = ["default.target"];
        serviceConfig = {
          User = "root";
          ExecStartPre = "${pkgs.kopia}/bin/kopia repository connect from-config --token-file ${config.sops.secrets.kopia-repository-token.path}";
          ExecStart = "${pkgs.kopia}/bin/kopia snapshot create /var/lib/scrypted";
          ExecStartPost = "${pkgs.kopia}/bin/kopia repository disconnect";
        };
      };
    };

    timers = {
      "backup-scrypted" = {
        enable = true;
        description = "Backup Scrypted installation with Kopia";
        wantedBy = ["timers.target"];
        timerConfig = {
          OnCalendar = "*-*-* 4:00:00";
          RandomizedDelaySec = "1h";
        };
      };
    };
  };
}
